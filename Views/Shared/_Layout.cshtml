@{


    var action = ViewContext.RouteData.Values["action"].ToString();
    var userAuthenticated = Context.Session.GetString("UserAuthenticated");
    var userName = Context.Session.GetString("UserName");
    if (userAuthenticated == null && action != "Login" && action != "Logout" && action != "Register")
    {
        Context.Response.Redirect("/Authentication/Login");
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MVCAuth</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/MVCAuth.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">MVCAuth</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item" >
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            |
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Authentication" asp-action="Login">Login</a>
                        </li>
                    </ul>
                    <ul class="nav navbar-nav navbar-right">
                        @{
                            if (userAuthenticated == "true")
                            {
                                <li class="nav-link text-dark" style="margin-right:5px">
                                    <a asp-area="" asp-controller="Authentication" asp-action="Profile" title="Authentication">
                                        <img src="images/profile.jpeg" width="15" height=15 />
                                    @userName </a>
                                </li>
                                <li class="nav-link text-dark" style="margin-right:5px">
                                    

                                    <a asp-area="" asp-controller="Authentication" asp-action="Logout" title="Logout">
                                        <img src="images/logout.jpeg" width="15" height=15 />Logout
                                    </a>
                                </li>
                            }
                        }                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - MVCAuth - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
<script>
    (function () {

        const currentPage=location.pathname;
        let loginPage = currentPage.includes("Login");
        let logoutPage = currentPage.includes("Logout");
        const idleDurationSecs = 10;    // X number of seconds
        const redirectUrl = '/Authentication/Logout';  // Redirect idle users to this URL
        let idleTimeout; // variable to hold the timeout, do not modify

        const resetIdleTimeout = function () 
        {

            // Clears the existing timeout
            if (idleTimeout) clearTimeout(idleTimeout);
           
            // Set a new idle timeout to load the redirectUrl after idleDurationSecs
            if (loginPage != true && logoutPage != true) {
                idleTimeout = setTimeout(() => location.href = redirectUrl, idleDurationSecs * 1000);
            }
        };

        // Init on page load
        resetIdleTimeout();

        // Reset the idle timeout on any of the events listed below
        ['click', 'touchstart', 'mousemove'].forEach(evt =>
            document.addEventListener(evt, resetIdleTimeout, false)
        );

    })();
</script>
</html>
